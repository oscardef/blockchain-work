StableSwapModule.sol
Allows anyone to go between AUSD and the Token by pooling the liquidity

function swapTokenToStablecoin(address _usr, uint256 _tokenAmount)
	⁃ Deposit token into the system and withdraw to receive stablecoin

	⁃ uint256 _tokenAmount18 = mul(_tokenAmount, to18ConversionFactor);
Convert token amount to 18 decimal places

	⁃ uint256 _fee = mul(_tokenAmount18, feeIn) / WAD;
Calculate fee the user will pay (using feeIn)

	⁃ uint256 _stablecoinAmount = sub(_tokenAmount18, _fee);
Stable coin amount user will receive is set to converted amount minus the fee the user pays

	⁃ authTokenAdapter.deposit(address(this), _tokenAmount, msg.sender);
Deposit token amount into tokenAdapter
	⁃	Deposit token into the system from the msgSender to be used as collateral
	⁃ bookKeeper.addCollateral(collateralPoolId, _urn, int256(_wad18));
	⁃ address(token).safeTransferFrom(_msgSender, address(this), _wad);
	⁃	

	⁃ bookKeeper.adjustPosition(
      collateralPoolId,
      address(this),
      address(this),
      address(this),
      int256(_tokenAmount18),
      int256(_tokenAmount18)
    );
Adjust a position on the target position address to perform locking/unlocking of collateral and minting/repaying of stablecoin

	⁃ bookKeeper.moveStablecoin(address(this), systemDebtEngine, mul(_fee, RAY));
Log the stable coin transfer in the bookkeeper (to the systemDebtEngine address)

	⁃ stablecoinAdapter.withdraw(_usr, _stablecoinAmount, abi.encode(0));
Withdraw stablecoin from the system to the caller
	⁃ bookKeeper.moveStablecoin(msg.sender, address(this), mul(ONE, wad));
	⁃ stablecoin.mint(usr, wad);




function swapStablecoinToToken(address _usr, uint256 _tokenAmount)
	⁃ Deposit stablecoin into the system and withdraw to receive token

	⁃ uint256 _tokenAmount18 = mul(_tokenAmount, to18ConversionFactor);
Convert token amount to 18 decimal places

	⁃ uint256 _fee = mul(_tokenAmount18, feeOut) / WAD;
Calculate fee the user will pay (using feeOut)


	⁃ uint256 _stablecoinAmount = add(_tokenAmount18, _fee);
Stable coin amount user will deposit is set to converted amount minus the fee the user pays

	⁃ address(stablecoin).safeTransferFrom(msg.sender, address(this), _stablecoinAmount);
Transfer stablecoin amount to this contract

stablecoinAdapter.deposit(address(this), _stablecoinAmount, abi.encode(0));
	⁃ Deposit stablecoin amount into stablecoin adapter

	⁃ bookKeeper.adjustPosition(
      collateralPoolId,
      address(this),
      address(this),
      address(this),
      -int256(_tokenAmount18),
      -int256(_tokenAmount18)
    );
Adjust a position on the target position address to perform locking/unlocking of collateral and minting/repaying of stablecoin
	⁃ Negative token amounts as we will be withdrawing tokens

	⁃ authTokenAdapter.withdraw(_usr, _tokenAmount);
Withdraw token amount from tokenAdapter

	⁃ bookKeeper.moveStablecoin(address(this), systemDebtEngine, mul(_fee, RAY));
Log the stable coin transfer in the bookkeeper (to the systemDebtEngine address)


